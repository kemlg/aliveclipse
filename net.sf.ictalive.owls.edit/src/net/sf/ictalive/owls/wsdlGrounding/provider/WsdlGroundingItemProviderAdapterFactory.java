/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package net.sf.ictalive.owls.wsdlGrounding.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.sf.ictalive.owls.wsdlGrounding.util.WsdlGroundingAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class WsdlGroundingItemProviderAdapterFactory extends WsdlGroundingAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public WsdlGroundingItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.owls.wsdlGrounding.WsdlGrounding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WsdlGroundingItemProvider wsdlGroundingItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.owls.wsdlGrounding.WsdlGrounding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWsdlGroundingAdapter() {
		if (wsdlGroundingItemProvider == null) {
			wsdlGroundingItemProvider = new WsdlGroundingItemProvider(this);
		}

		return wsdlGroundingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.owls.wsdlGrounding.WsdlAtomicProcessGrounding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WsdlAtomicProcessGroundingItemProvider wsdlAtomicProcessGroundingItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.owls.wsdlGrounding.WsdlAtomicProcessGrounding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWsdlAtomicProcessGroundingAdapter() {
		if (wsdlAtomicProcessGroundingItemProvider == null) {
			wsdlAtomicProcessGroundingItemProvider = new WsdlAtomicProcessGroundingItemProvider(this);
		}

		return wsdlAtomicProcessGroundingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.owls.wsdlGrounding.WsdlOperationRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WsdlOperationRefItemProvider wsdlOperationRefItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.owls.wsdlGrounding.WsdlOperationRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWsdlOperationRefAdapter() {
		if (wsdlOperationRefItemProvider == null) {
			wsdlOperationRefItemProvider = new WsdlOperationRefItemProvider(this);
		}

		return wsdlOperationRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.owls.wsdlGrounding.WsdlMessageMap} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WsdlMessageMapItemProvider wsdlMessageMapItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.owls.wsdlGrounding.WsdlMessageMap}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWsdlMessageMapAdapter() {
		if (wsdlMessageMapItemProvider == null) {
			wsdlMessageMapItemProvider = new WsdlMessageMapItemProvider(this);
		}

		return wsdlMessageMapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.owls.wsdlGrounding.WsdlInputMessageMap} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WsdlInputMessageMapItemProvider wsdlInputMessageMapItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.owls.wsdlGrounding.WsdlInputMessageMap}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWsdlInputMessageMapAdapter() {
		if (wsdlInputMessageMapItemProvider == null) {
			wsdlInputMessageMapItemProvider = new WsdlInputMessageMapItemProvider(this);
		}

		return wsdlInputMessageMapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.owls.wsdlGrounding.WsdlOutputMessageMap} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WsdlOutputMessageMapItemProvider wsdlOutputMessageMapItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.owls.wsdlGrounding.WsdlOutputMessageMap}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWsdlOutputMessageMapAdapter() {
		if (wsdlOutputMessageMapItemProvider == null) {
			wsdlOutputMessageMapItemProvider = new WsdlOutputMessageMapItemProvider(this);
		}

		return wsdlOutputMessageMapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.owls.wsdlGrounding.GD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GDItemProvider gdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.owls.wsdlGrounding.GD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGDAdapter() {
		if (gdItemProvider == null) {
			gdItemProvider = new GDItemProvider(this);
		}

		return gdItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (wsdlGroundingItemProvider != null) wsdlGroundingItemProvider.dispose();
		if (wsdlAtomicProcessGroundingItemProvider != null) wsdlAtomicProcessGroundingItemProvider.dispose();
		if (wsdlOperationRefItemProvider != null) wsdlOperationRefItemProvider.dispose();
		if (wsdlMessageMapItemProvider != null) wsdlMessageMapItemProvider.dispose();
		if (wsdlInputMessageMapItemProvider != null) wsdlInputMessageMapItemProvider.dispose();
		if (wsdlOutputMessageMapItemProvider != null) wsdlOutputMessageMapItemProvider.dispose();
		if (gdItemProvider != null) gdItemProvider.dispose();
	}

}
