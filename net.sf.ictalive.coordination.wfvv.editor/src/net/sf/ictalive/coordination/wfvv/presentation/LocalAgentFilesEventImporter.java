package net.sf.ictalive.coordination.wfvv.presentation;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;

import net.sf.ictalive.coordination.wfvv.EventModelContainer;
import net.sf.ictalive.coordination.wfvv.WfvvFactory;
import net.sf.ictalive.runtime.action.ActionPackage;
import net.sf.ictalive.runtime.enactment.EnactmentPackage;
import net.sf.ictalive.runtime.event.Event;
import net.sf.ictalive.runtime.event.EventPackage;
import net.sf.ictalive.runtime.fact.FactPackage;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IPath;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.XMLResource;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.eclipse.emf.ecore.xmi.impl.XMLResourceFactoryImpl;
import org.eclipse.swt.widgets.Composite;

public class LocalAgentFilesEventImporter extends EventSelectionImportPage {

	public LocalAgentFilesEventImporter() {
		super(".events");
	}

	@Override
	public String getOptionText() {
		return "Import events generated by agents and directly stored in local files";
	}
	
	@Override
	protected String getTitleText() {
		return "Select the .events files generated by agents";
	}
	
	@Override
	public boolean isComplete() {
		// TODO Auto-generated method stub
		return true;
	}
	
	@Override
	protected void addToControl(Composite control) {
		
	}

	@Override
	public boolean importEvents(EventModelContainer container) {
		
		
		URI others = container.eResource().getURI();

		String extension = others.fileExtension();
		String path = others.toPlatformString(true);
		path = path.substring(0, path.length()-(extension.length()+1));
		int counter =0;
		
		
		
		ResourceSet rs = container.eResource().getResourceSet();
		rs.getResourceFactoryRegistry().getExtensionToFactoryMap().put("event",
				new XMLResourceFactoryImpl());
		
		Set<String> types = new TreeSet<String>();
		ArrayList<IResource> selectedResources = getSelectedFiles();
		for (IResource r : selectedResources){
			Resource rResource = rs.getResource(URI.createPlatformResourceURI(r.getFullPath().toString()), true);
			EList<EObject> rContents = rResource.getContents();
			for (int i=0, j=rContents.size();i<j;i++){
				EObject obj = rResource.getContents().get(0);
				if (obj instanceof Event){
					container.getEvents().add((Event)obj);
				} else {
					types.add(obj.getClass().getCanonicalName());
					container.getObjects().add(obj);
				}
			}
		}

		System.out.println("Types " + types.toString());
		
		return true;
	}
}
