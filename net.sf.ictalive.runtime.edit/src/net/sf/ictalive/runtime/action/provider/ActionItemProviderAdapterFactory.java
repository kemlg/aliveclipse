/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package net.sf.ictalive.runtime.action.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.sf.ictalive.runtime.action.util.ActionAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ActionItemProviderAdapterFactory extends ActionAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ActionItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.action.CommunicativeAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommunicativeActionItemProvider communicativeActionItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.action.CommunicativeAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommunicativeActionAdapter() {
		if (communicativeActionItemProvider == null) {
			communicativeActionItemProvider = new CommunicativeActionItemProvider(this);
		}

		return communicativeActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.action.CoordinationAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CoordinationActionItemProvider coordinationActionItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.action.CoordinationAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCoordinationActionAdapter() {
		if (coordinationActionItemProvider == null) {
			coordinationActionItemProvider = new CoordinationActionItemProvider(this);
		}

		return coordinationActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.action.PlanSynthesis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlanSynthesisItemProvider planSynthesisItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.action.PlanSynthesis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlanSynthesisAdapter() {
		if (planSynthesisItemProvider == null) {
			planSynthesisItemProvider = new PlanSynthesisItemProvider(this);
		}

		return planSynthesisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.action.PlanDistribution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlanDistributionItemProvider planDistributionItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.action.PlanDistribution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlanDistributionAdapter() {
		if (planDistributionItemProvider == null) {
			planDistributionItemProvider = new PlanDistributionItemProvider(this);
		}

		return planDistributionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.action.PlanSchedule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlanScheduleItemProvider planScheduleItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.action.PlanSchedule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlanScheduleAdapter() {
		if (planScheduleItemProvider == null) {
			planScheduleItemProvider = new PlanScheduleItemProvider(this);
		}

		return planScheduleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.action.PlanExecution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlanExecutionItemProvider planExecutionItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.action.PlanExecution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlanExecutionAdapter() {
		if (planExecutionItemProvider == null) {
			planExecutionItemProvider = new PlanExecutionItemProvider(this);
		}

		return planExecutionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.action.Result} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResultItemProvider resultItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.action.Result}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResultAdapter() {
		if (resultItemProvider == null) {
			resultItemProvider = new ResultItemProvider(this);
		}

		return resultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.action.ServiceInvocation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceInvocationItemProvider serviceInvocationItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.action.ServiceInvocation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceInvocationAdapter() {
		if (serviceInvocationItemProvider == null) {
			serviceInvocationItemProvider = new ServiceInvocationItemProvider(this);
		}

		return serviceInvocationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.action.MatchmakerResponse} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatchmakerResponseItemProvider matchmakerResponseItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.action.MatchmakerResponse}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatchmakerResponseAdapter() {
		if (matchmakerResponseItemProvider == null) {
			matchmakerResponseItemProvider = new MatchmakerResponseItemProvider(this);
		}

		return matchmakerResponseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.action.ReplaceAgent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReplaceAgentItemProvider replaceAgentItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.action.ReplaceAgent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReplaceAgentAdapter() {
		if (replaceAgentItemProvider == null) {
			replaceAgentItemProvider = new ReplaceAgentItemProvider(this);
		}

		return replaceAgentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.action.AgentReplan} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AgentReplanItemProvider agentReplanItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.action.AgentReplan}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAgentReplanAdapter() {
		if (agentReplanItemProvider == null) {
			agentReplanItemProvider = new AgentReplanItemProvider(this);
		}

		return agentReplanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.action.NotifyStateOfWorld} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NotifyStateOfWorldItemProvider notifyStateOfWorldItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.action.NotifyStateOfWorld}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNotifyStateOfWorldAdapter() {
		if (notifyStateOfWorldItemProvider == null) {
			notifyStateOfWorldItemProvider = new NotifyStateOfWorldItemProvider(this);
		}

		return notifyStateOfWorldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.action.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.action.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.action.StateOfWorld} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateOfWorldItemProvider stateOfWorldItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.action.StateOfWorld}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateOfWorldAdapter() {
		if (stateOfWorldItemProvider == null) {
			stateOfWorldItemProvider = new StateOfWorldItemProvider(this);
		}

		return stateOfWorldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.action.MatchmakerQuery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatchmakerQueryItemProvider matchmakerQueryItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.action.MatchmakerQuery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatchmakerQueryAdapter() {
		if (matchmakerQueryItemProvider == null) {
			matchmakerQueryItemProvider = new MatchmakerQueryItemProvider(this);
		}

		return matchmakerQueryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.action.MatchmakerResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatchmakerResultItemProvider matchmakerResultItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.action.MatchmakerResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatchmakerResultAdapter() {
		if (matchmakerResultItemProvider == null) {
			matchmakerResultItemProvider = new MatchmakerResultItemProvider(this);
		}

		return matchmakerResultItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (communicativeActionItemProvider != null) communicativeActionItemProvider.dispose();
		if (coordinationActionItemProvider != null) coordinationActionItemProvider.dispose();
		if (planSynthesisItemProvider != null) planSynthesisItemProvider.dispose();
		if (planDistributionItemProvider != null) planDistributionItemProvider.dispose();
		if (planScheduleItemProvider != null) planScheduleItemProvider.dispose();
		if (planExecutionItemProvider != null) planExecutionItemProvider.dispose();
		if (resultItemProvider != null) resultItemProvider.dispose();
		if (serviceInvocationItemProvider != null) serviceInvocationItemProvider.dispose();
		if (matchmakerResponseItemProvider != null) matchmakerResponseItemProvider.dispose();
		if (replaceAgentItemProvider != null) replaceAgentItemProvider.dispose();
		if (agentReplanItemProvider != null) agentReplanItemProvider.dispose();
		if (notifyStateOfWorldItemProvider != null) notifyStateOfWorldItemProvider.dispose();
		if (parameterItemProvider != null) parameterItemProvider.dispose();
		if (stateOfWorldItemProvider != null) stateOfWorldItemProvider.dispose();
		if (matchmakerQueryItemProvider != null) matchmakerQueryItemProvider.dispose();
		if (matchmakerResultItemProvider != null) matchmakerResultItemProvider.dispose();
	}

}
