/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package net.sf.ictalive.runtime.fact.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.sf.ictalive.runtime.fact.util.FactAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FactItemProviderAdapterFactory extends FactAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FactItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.fact.StartedAct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StartedActItemProvider startedActItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.fact.StartedAct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStartedActAdapter() {
		if (startedActItemProvider == null) {
			startedActItemProvider = new StartedActItemProvider(this);
		}

		return startedActItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.fact.ExecutedAct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExecutedActItemProvider executedActItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.fact.ExecutedAct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExecutedActAdapter() {
		if (executedActItemProvider == null) {
			executedActItemProvider = new ExecutedActItemProvider(this);
		}

		return executedActItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.fact.FailureAct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FailureActItemProvider failureActItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.fact.FailureAct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFailureActAdapter() {
		if (failureActItemProvider == null) {
			failureActItemProvider = new FailureActItemProvider(this);
		}

		return failureActItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.fact.Disaster} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisasterItemProvider disasterItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.fact.Disaster}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisasterAdapter() {
		if (disasterItemProvider == null) {
			disasterItemProvider = new DisasterItemProvider(this);
		}

		return disasterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.fact.ReceiveAct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReceiveActItemProvider receiveActItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.fact.ReceiveAct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReceiveActAdapter() {
		if (receiveActItemProvider == null) {
			receiveActItemProvider = new ReceiveActItemProvider(this);
		}

		return receiveActItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.fact.SendAct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SendActItemProvider sendActItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.fact.SendAct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSendActAdapter() {
		if (sendActItemProvider == null) {
			sendActItemProvider = new SendActItemProvider(this);
		}

		return sendActItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.fact.Message} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MessageItemProvider messageItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.fact.Message}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMessageAdapter() {
		if (messageItemProvider == null) {
			messageItemProvider = new MessageItemProvider(this);
		}

		return messageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.fact.Content} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContentItemProvider contentItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.fact.Content}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContentAdapter() {
		if (contentItemProvider == null) {
			contentItemProvider = new ContentItemProvider(this);
		}

		return contentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.fact.DeadlineViolation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeadlineViolationItemProvider deadlineViolationItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.fact.DeadlineViolation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeadlineViolationAdapter() {
		if (deadlineViolationItemProvider == null) {
			deadlineViolationItemProvider = new DeadlineViolationItemProvider(this);
		}

		return deadlineViolationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.fact.TaskViolation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskViolationItemProvider taskViolationItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.fact.TaskViolation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskViolationAdapter() {
		if (taskViolationItemProvider == null) {
			taskViolationItemProvider = new TaskViolationItemProvider(this);
		}

		return taskViolationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.fact.Availability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AvailabilityItemProvider availabilityItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.fact.Availability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAvailabilityAdapter() {
		if (availabilityItemProvider == null) {
			availabilityItemProvider = new AvailabilityItemProvider(this);
		}

		return availabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.fact.LandmarkFulfilment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LandmarkFulfilmentItemProvider landmarkFulfilmentItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.fact.LandmarkFulfilment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLandmarkFulfilmentAdapter() {
		if (landmarkFulfilmentItemProvider == null) {
			landmarkFulfilmentItemProvider = new LandmarkFulfilmentItemProvider(this);
		}

		return landmarkFulfilmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.fact.NormConditionFulfilment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NormConditionFulfilmentItemProvider normConditionFulfilmentItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.fact.NormConditionFulfilment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNormConditionFulfilmentAdapter() {
		if (normConditionFulfilmentItemProvider == null) {
			normConditionFulfilmentItemProvider = new NormConditionFulfilmentItemProvider(this);
		}

		return normConditionFulfilmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.fact.ObjectiveFulfilment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectiveFulfilmentItemProvider objectiveFulfilmentItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.fact.ObjectiveFulfilment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectiveFulfilmentAdapter() {
		if (objectiveFulfilmentItemProvider == null) {
			objectiveFulfilmentItemProvider = new ObjectiveFulfilmentItemProvider(this);
		}

		return objectiveFulfilmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.fact.PlayerFulfilment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlayerFulfilmentItemProvider playerFulfilmentItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.fact.PlayerFulfilment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlayerFulfilmentAdapter() {
		if (playerFulfilmentItemProvider == null) {
			playerFulfilmentItemProvider = new PlayerFulfilmentItemProvider(this);
		}

		return playerFulfilmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.fact.NormInstanceViolated} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NormInstanceViolatedItemProvider normInstanceViolatedItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.fact.NormInstanceViolated}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNormInstanceViolatedAdapter() {
		if (normInstanceViolatedItemProvider == null) {
			normInstanceViolatedItemProvider = new NormInstanceViolatedItemProvider(this);
		}

		return normInstanceViolatedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.fact.NormInstanceActivated} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NormInstanceActivatedItemProvider normInstanceActivatedItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.fact.NormInstanceActivated}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNormInstanceActivatedAdapter() {
		if (normInstanceActivatedItemProvider == null) {
			normInstanceActivatedItemProvider = new NormInstanceActivatedItemProvider(this);
		}

		return normInstanceActivatedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.runtime.fact.NormInstanceExpired} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NormInstanceExpiredItemProvider normInstanceExpiredItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.runtime.fact.NormInstanceExpired}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNormInstanceExpiredAdapter() {
		if (normInstanceExpiredItemProvider == null) {
			normInstanceExpiredItemProvider = new NormInstanceExpiredItemProvider(this);
		}

		return normInstanceExpiredItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (startedActItemProvider != null) startedActItemProvider.dispose();
		if (executedActItemProvider != null) executedActItemProvider.dispose();
		if (failureActItemProvider != null) failureActItemProvider.dispose();
		if (disasterItemProvider != null) disasterItemProvider.dispose();
		if (receiveActItemProvider != null) receiveActItemProvider.dispose();
		if (sendActItemProvider != null) sendActItemProvider.dispose();
		if (messageItemProvider != null) messageItemProvider.dispose();
		if (contentItemProvider != null) contentItemProvider.dispose();
		if (deadlineViolationItemProvider != null) deadlineViolationItemProvider.dispose();
		if (taskViolationItemProvider != null) taskViolationItemProvider.dispose();
		if (availabilityItemProvider != null) availabilityItemProvider.dispose();
		if (landmarkFulfilmentItemProvider != null) landmarkFulfilmentItemProvider.dispose();
		if (normConditionFulfilmentItemProvider != null) normConditionFulfilmentItemProvider.dispose();
		if (objectiveFulfilmentItemProvider != null) objectiveFulfilmentItemProvider.dispose();
		if (playerFulfilmentItemProvider != null) playerFulfilmentItemProvider.dispose();
		if (normInstanceViolatedItemProvider != null) normInstanceViolatedItemProvider.dispose();
		if (normInstanceActivatedItemProvider != null) normInstanceActivatedItemProvider.dispose();
		if (normInstanceExpiredItemProvider != null) normInstanceExpiredItemProvider.dispose();
	}

}
