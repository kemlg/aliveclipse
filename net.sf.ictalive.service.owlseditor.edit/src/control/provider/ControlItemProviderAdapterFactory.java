/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package control.provider;

import control.util.ControlAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ControlItemProviderAdapterFactory extends ControlAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public ControlItemProviderAdapterFactory()
  {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.NamedElement} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected NamedElementItemProvider namedElementItemProvider;

  /**
	 * This creates an adapter for a {@link control.NamedElement}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createNamedElementAdapter()
  {
		if (namedElementItemProvider == null) {
			namedElementItemProvider = new NamedElementItemProvider(this);
		}

		return namedElementItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.ProcessVar} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected ProcessVarItemProvider processVarItemProvider;

  /**
	 * This creates an adapter for a {@link control.ProcessVar}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createProcessVarAdapter()
  {
		if (processVarItemProvider == null) {
			processVarItemProvider = new ProcessVarItemProvider(this);
		}

		return processVarItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.Ontology} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologyItemProvider ontologyItemProvider;

		/**
	 * This creates an adapter for a {@link control.Ontology}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologyAdapter() {
		if (ontologyItemProvider == null) {
			ontologyItemProvider = new OntologyItemProvider(this);
		}

		return ontologyItemProvider;
	}

		/**
	 * This keeps track of the one adapter used for all {@link control.TemplateConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateConstraintItemProvider templateConstraintItemProvider;

		/**
	 * This creates an adapter for a {@link control.TemplateConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateConstraintAdapter() {
		if (templateConstraintItemProvider == null) {
			templateConstraintItemProvider = new TemplateConstraintItemProvider(this);
		}

		return templateConstraintItemProvider;
	}

		/**
	 * This keeps track of the one adapter used for all {@link control.Input} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected InputItemProvider inputItemProvider;

  /**
	 * This creates an adapter for a {@link control.Input}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createInputAdapter()
  {
		if (inputItemProvider == null) {
			inputItemProvider = new InputItemProvider(this);
		}

		return inputItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.Output} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected OutputItemProvider outputItemProvider;

  /**
	 * This creates an adapter for a {@link control.Output}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createOutputAdapter()
  {
		if (outputItemProvider == null) {
			outputItemProvider = new OutputItemProvider(this);
		}

		return outputItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.OuterProcess} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected OuterProcessItemProvider outerProcessItemProvider;

  /**
	 * This creates an adapter for a {@link control.OuterProcess}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createOuterProcessAdapter()
  {
		if (outerProcessItemProvider == null) {
			outerProcessItemProvider = new OuterProcessItemProvider(this);
		}

		return outerProcessItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.RemoteProcess} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected RemoteProcessItemProvider remoteProcessItemProvider;

  /**
	 * This creates an adapter for a {@link control.RemoteProcess}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createRemoteProcessAdapter()
  {
		if (remoteProcessItemProvider == null) {
			remoteProcessItemProvider = new RemoteProcessItemProvider(this);
		}

		return remoteProcessItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.TemplateProcess} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected TemplateProcessItemProvider templateProcessItemProvider;

  /**
	 * This creates an adapter for a {@link control.TemplateProcess}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createTemplateProcessAdapter()
  {
		if (templateProcessItemProvider == null) {
			templateProcessItemProvider = new TemplateProcessItemProvider(this);
		}

		return templateProcessItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.Sequence} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected SequenceItemProvider sequenceItemProvider;

  /**
	 * This creates an adapter for a {@link control.Sequence}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createSequenceAdapter()
  {
		if (sequenceItemProvider == null) {
			sequenceItemProvider = new SequenceItemProvider(this);
		}

		return sequenceItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.Choice} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected ChoiceItemProvider choiceItemProvider;

  /**
	 * This creates an adapter for a {@link control.Choice}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createChoiceAdapter()
  {
		if (choiceItemProvider == null) {
			choiceItemProvider = new ChoiceItemProvider(this);
		}

		return choiceItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.AnyOrder} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected AnyOrderItemProvider anyOrderItemProvider;

  /**
	 * This creates an adapter for a {@link control.AnyOrder}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createAnyOrderAdapter()
  {
		if (anyOrderItemProvider == null) {
			anyOrderItemProvider = new AnyOrderItemProvider(this);
		}

		return anyOrderItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.Split} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected SplitItemProvider splitItemProvider;

  /**
	 * This creates an adapter for a {@link control.Split}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createSplitAdapter()
  {
		if (splitItemProvider == null) {
			splitItemProvider = new SplitItemProvider(this);
		}

		return splitItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.SplitJoin} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected SplitJoinItemProvider splitJoinItemProvider;

  /**
	 * This creates an adapter for a {@link control.SplitJoin}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createSplitJoinAdapter()
  {
		if (splitJoinItemProvider == null) {
			splitJoinItemProvider = new SplitJoinItemProvider(this);
		}

		return splitJoinItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.IfThenElse} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected IfThenElseItemProvider ifThenElseItemProvider;

  /**
	 * This creates an adapter for a {@link control.IfThenElse}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createIfThenElseAdapter()
  {
		if (ifThenElseItemProvider == null) {
			ifThenElseItemProvider = new IfThenElseItemProvider(this);
		}

		return ifThenElseItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.RepeatUntil} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected RepeatUntilItemProvider repeatUntilItemProvider;

  /**
	 * This creates an adapter for a {@link control.RepeatUntil}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createRepeatUntilAdapter()
  {
		if (repeatUntilItemProvider == null) {
			repeatUntilItemProvider = new RepeatUntilItemProvider(this);
		}

		return repeatUntilItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.RepeatWhile} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected RepeatWhileItemProvider repeatWhileItemProvider;

  /**
	 * This creates an adapter for a {@link control.RepeatWhile}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createRepeatWhileAdapter()
  {
		if (repeatWhileItemProvider == null) {
			repeatWhileItemProvider = new RepeatWhileItemProvider(this);
		}

		return repeatWhileItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.Perform} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected PerformItemProvider performItemProvider;

  /**
	 * This creates an adapter for a {@link control.Perform}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createPerformAdapter()
  {
		if (performItemProvider == null) {
			performItemProvider = new PerformItemProvider(this);
		}

		return performItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.Produce} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected ProduceItemProvider produceItemProvider;

  /**
	 * This creates an adapter for a {@link control.Produce}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createProduceAdapter()
  {
		if (produceItemProvider == null) {
			produceItemProvider = new ProduceItemProvider(this);
		}

		return produceItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.Set} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected SetItemProvider setItemProvider;

  /**
	 * This creates an adapter for a {@link control.Set}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createSetAdapter()
  {
		if (setItemProvider == null) {
			setItemProvider = new SetItemProvider(this);
		}

		return setItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.ValueSource} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected ValueSourceItemProvider valueSourceItemProvider;

  /**
	 * This creates an adapter for a {@link control.ValueSource}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createValueSourceAdapter()
  {
		if (valueSourceItemProvider == null) {
			valueSourceItemProvider = new ValueSourceItemProvider(this);
		}

		return valueSourceItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.ValueForm} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected ValueFormItemProvider valueFormItemProvider;

  /**
	 * This creates an adapter for a {@link control.ValueForm}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createValueFormAdapter()
  {
		if (valueFormItemProvider == null) {
			valueFormItemProvider = new ValueFormItemProvider(this);
		}

		return valueFormItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.ValueFunction} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected ValueFunctionItemProvider valueFunctionItemProvider;

  /**
	 * This creates an adapter for a {@link control.ValueFunction}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createValueFunctionAdapter()
  {
		if (valueFunctionItemProvider == null) {
			valueFunctionItemProvider = new ValueFunctionItemProvider(this);
		}

		return valueFunctionItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.InputBinding} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected InputBindingItemProvider inputBindingItemProvider;

  /**
	 * This creates an adapter for a {@link control.InputBinding}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createInputBindingAdapter()
  {
		if (inputBindingItemProvider == null) {
			inputBindingItemProvider = new InputBindingItemProvider(this);
		}

		return inputBindingItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.OutputBinding} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected OutputBindingItemProvider outputBindingItemProvider;

  /**
	 * This creates an adapter for a {@link control.OutputBinding}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createOutputBindingAdapter()
  {
		if (outputBindingItemProvider == null) {
			outputBindingItemProvider = new OutputBindingItemProvider(this);
		}

		return outputBindingItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.LocBinding} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected LocBindingItemProvider locBindingItemProvider;

  /**
	 * This creates an adapter for a {@link control.LocBinding}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createLocBindingAdapter()
  {
		if (locBindingItemProvider == null) {
			locBindingItemProvider = new LocBindingItemProvider(this);
		}

		return locBindingItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.LinkBinding} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected LinkBindingItemProvider linkBindingItemProvider;

  /**
	 * This creates an adapter for a {@link control.LinkBinding}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createLinkBindingAdapter()
  {
		if (linkBindingItemProvider == null) {
			linkBindingItemProvider = new LinkBindingItemProvider(this);
		}

		return linkBindingItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.outputBindingSource} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected outputBindingSourceItemProvider outputBindingSourceItemProvider;

  /**
	 * This creates an adapter for a {@link control.outputBindingSource}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createoutputBindingSourceAdapter()
  {
		if (outputBindingSourceItemProvider == null) {
			outputBindingSourceItemProvider = new outputBindingSourceItemProvider(this);
		}

		return outputBindingSourceItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.Result} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected ResultItemProvider resultItemProvider;

  /**
	 * This creates an adapter for a {@link control.Result}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createResultAdapter()
  {
		if (resultItemProvider == null) {
			resultItemProvider = new ResultItemProvider(this);
		}

		return resultItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.ResultVar} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected ResultVarItemProvider resultVarItemProvider;

  /**
	 * This creates an adapter for a {@link control.ResultVar}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createResultVarAdapter()
  {
		if (resultVarItemProvider == null) {
			resultVarItemProvider = new ResultVarItemProvider(this);
		}

		return resultVarItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.Local} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected LocalItemProvider localItemProvider;

  /**
	 * This creates an adapter for a {@link control.Local}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createLocalAdapter()
  {
		if (localItemProvider == null) {
			localItemProvider = new LocalItemProvider(this);
		}

		return localItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.Loc} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected LocItemProvider locItemProvider;

  /**
	 * This creates an adapter for a {@link control.Loc}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createLocAdapter()
  {
		if (locItemProvider == null) {
			locItemProvider = new LocItemProvider(this);
		}

		return locItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.Link} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected LinkItemProvider linkItemProvider;

  /**
	 * This creates an adapter for a {@link control.Link}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createLinkAdapter()
  {
		if (linkItemProvider == null) {
			linkItemProvider = new LinkItemProvider(this);
		}

		return linkItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.ControlConstructBag} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected ControlConstructBagItemProvider controlConstructBagItemProvider;

  /**
	 * This creates an adapter for a {@link control.ControlConstructBag}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createControlConstructBagAdapter()
  {
		if (controlConstructBagItemProvider == null) {
			controlConstructBagItemProvider = new ControlConstructBagItemProvider(this);
		}

		return controlConstructBagItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.ControlConstructList} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected ControlConstructListItemProvider controlConstructListItemProvider;

  /**
	 * This creates an adapter for a {@link control.ControlConstructList}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createControlConstructListAdapter()
  {
		if (controlConstructListItemProvider == null) {
			controlConstructListItemProvider = new ControlConstructListItemProvider(this);
		}

		return controlConstructListItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.Condition} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected ConditionItemProvider conditionItemProvider;

  /**
	 * This creates an adapter for a {@link control.Condition}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createConditionAdapter()
  {
		if (conditionItemProvider == null) {
			conditionItemProvider = new ConditionItemProvider(this);
		}

		return conditionItemProvider;
	}

  /**
	 * This keeps track of the one adapter used for all {@link control.Expr} instances.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected ExprItemProvider exprItemProvider;

  /**
	 * This creates an adapter for a {@link control.Expr}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter createExprAdapter()
  {
		if (exprItemProvider == null) {
			exprItemProvider = new ExprItemProvider(this);
		}

		return exprItemProvider;
	}

  /**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

  /**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
		this.parentAdapterFactory = parentAdapterFactory;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean isFactoryForType(Object type)
  {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

  /**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
		return super.adapt(notifier, this);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object adapt(Object object, Object type)
  {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

  /**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
		changeNotifier.addListener(notifyChangedListener);
	}

  /**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
		changeNotifier.removeListener(notifyChangedListener);
	}

  /**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void fireNotifyChanged(Notification notification)
  {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

  /**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void dispose()
  {
		if (namedElementItemProvider != null) namedElementItemProvider.dispose();
		if (processVarItemProvider != null) processVarItemProvider.dispose();
		if (ontologyItemProvider != null) ontologyItemProvider.dispose();
		if (templateConstraintItemProvider != null) templateConstraintItemProvider.dispose();
		if (inputItemProvider != null) inputItemProvider.dispose();
		if (outputItemProvider != null) outputItemProvider.dispose();
		if (outerProcessItemProvider != null) outerProcessItemProvider.dispose();
		if (remoteProcessItemProvider != null) remoteProcessItemProvider.dispose();
		if (templateProcessItemProvider != null) templateProcessItemProvider.dispose();
		if (sequenceItemProvider != null) sequenceItemProvider.dispose();
		if (choiceItemProvider != null) choiceItemProvider.dispose();
		if (anyOrderItemProvider != null) anyOrderItemProvider.dispose();
		if (splitItemProvider != null) splitItemProvider.dispose();
		if (splitJoinItemProvider != null) splitJoinItemProvider.dispose();
		if (ifThenElseItemProvider != null) ifThenElseItemProvider.dispose();
		if (repeatUntilItemProvider != null) repeatUntilItemProvider.dispose();
		if (repeatWhileItemProvider != null) repeatWhileItemProvider.dispose();
		if (performItemProvider != null) performItemProvider.dispose();
		if (produceItemProvider != null) produceItemProvider.dispose();
		if (setItemProvider != null) setItemProvider.dispose();
		if (valueSourceItemProvider != null) valueSourceItemProvider.dispose();
		if (valueFormItemProvider != null) valueFormItemProvider.dispose();
		if (valueFunctionItemProvider != null) valueFunctionItemProvider.dispose();
		if (inputBindingItemProvider != null) inputBindingItemProvider.dispose();
		if (outputBindingItemProvider != null) outputBindingItemProvider.dispose();
		if (locBindingItemProvider != null) locBindingItemProvider.dispose();
		if (linkBindingItemProvider != null) linkBindingItemProvider.dispose();
		if (outputBindingSourceItemProvider != null) outputBindingSourceItemProvider.dispose();
		if (resultItemProvider != null) resultItemProvider.dispose();
		if (resultVarItemProvider != null) resultVarItemProvider.dispose();
		if (localItemProvider != null) localItemProvider.dispose();
		if (locItemProvider != null) locItemProvider.dispose();
		if (linkItemProvider != null) linkItemProvider.dispose();
		if (controlConstructBagItemProvider != null) controlConstructBagItemProvider.dispose();
		if (controlConstructListItemProvider != null) controlConstructListItemProvider.dispose();
		if (conditionItemProvider != null) conditionItemProvider.dispose();
		if (exprItemProvider != null) exprItemProvider.dispose();
	}

}
