/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package net.sf.ictalive.schema.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.sf.ictalive.schema.util.SchemaAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SchemaItemProviderAdapterFactory extends SchemaAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SchemaItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.All} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AllItemProvider allItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.All}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAllAdapter() {
		if (allItemProvider == null) {
			allItemProvider = new AllItemProvider(this);
		}

		return allItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.Annotated} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnnotatedItemProvider annotatedItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.Annotated}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnnotatedAdapter() {
		if (annotatedItemProvider == null) {
			annotatedItemProvider = new AnnotatedItemProvider(this);
		}

		return annotatedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.AnnotationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnnotationTypeItemProvider annotationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.AnnotationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnnotationTypeAdapter() {
		if (annotationTypeItemProvider == null) {
			annotationTypeItemProvider = new AnnotationTypeItemProvider(this);
		}

		return annotationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.AnyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnyTypeItemProvider anyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.AnyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnyTypeAdapter() {
		if (anyTypeItemProvider == null) {
			anyTypeItemProvider = new AnyTypeItemProvider(this);
		}

		return anyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.AppinfoType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AppinfoTypeItemProvider appinfoTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.AppinfoType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAppinfoTypeAdapter() {
		if (appinfoTypeItemProvider == null) {
			appinfoTypeItemProvider = new AppinfoTypeItemProvider(this);
		}

		return appinfoTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.Attribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeItemProvider attributeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.Attribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeAdapter() {
		if (attributeItemProvider == null) {
			attributeItemProvider = new AttributeItemProvider(this);
		}

		return attributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.AttributeGroupRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeGroupRefItemProvider attributeGroupRefItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.AttributeGroupRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeGroupRefAdapter() {
		if (attributeGroupRefItemProvider == null) {
			attributeGroupRefItemProvider = new AttributeGroupRefItemProvider(this);
		}

		return attributeGroupRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.ComplexContentType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComplexContentTypeItemProvider complexContentTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.ComplexContentType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComplexContentTypeAdapter() {
		if (complexContentTypeItemProvider == null) {
			complexContentTypeItemProvider = new ComplexContentTypeItemProvider(this);
		}

		return complexContentTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.ComplexRestrictionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComplexRestrictionTypeItemProvider complexRestrictionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.ComplexRestrictionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComplexRestrictionTypeAdapter() {
		if (complexRestrictionTypeItemProvider == null) {
			complexRestrictionTypeItemProvider = new ComplexRestrictionTypeItemProvider(this);
		}

		return complexRestrictionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.DocumentationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentationTypeItemProvider documentationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.DocumentationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentationTypeAdapter() {
		if (documentationTypeItemProvider == null) {
			documentationTypeItemProvider = new DocumentationTypeItemProvider(this);
		}

		return documentationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.ExplicitGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExplicitGroupItemProvider explicitGroupItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.ExplicitGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExplicitGroupAdapter() {
		if (explicitGroupItemProvider == null) {
			explicitGroupItemProvider = new ExplicitGroupItemProvider(this);
		}

		return explicitGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.ExtensionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExtensionTypeItemProvider extensionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.ExtensionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExtensionTypeAdapter() {
		if (extensionTypeItemProvider == null) {
			extensionTypeItemProvider = new ExtensionTypeItemProvider(this);
		}

		return extensionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.Facet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FacetItemProvider facetItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.Facet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFacetAdapter() {
		if (facetItemProvider == null) {
			facetItemProvider = new FacetItemProvider(this);
		}

		return facetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.FieldType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FieldTypeItemProvider fieldTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.FieldType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFieldTypeAdapter() {
		if (fieldTypeItemProvider == null) {
			fieldTypeItemProvider = new FieldTypeItemProvider(this);
		}

		return fieldTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.GroupRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GroupRefItemProvider groupRefItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.GroupRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGroupRefAdapter() {
		if (groupRefItemProvider == null) {
			groupRefItemProvider = new GroupRefItemProvider(this);
		}

		return groupRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.ImportType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportTypeItemProvider importTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.ImportType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportTypeAdapter() {
		if (importTypeItemProvider == null) {
			importTypeItemProvider = new ImportTypeItemProvider(this);
		}

		return importTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.IncludeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IncludeTypeItemProvider includeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.IncludeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIncludeTypeAdapter() {
		if (includeTypeItemProvider == null) {
			includeTypeItemProvider = new IncludeTypeItemProvider(this);
		}

		return includeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.Keybase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeybaseItemProvider keybaseItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.Keybase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeybaseAdapter() {
		if (keybaseItemProvider == null) {
			keybaseItemProvider = new KeybaseItemProvider(this);
		}

		return keybaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.KeyrefType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeyrefTypeItemProvider keyrefTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.KeyrefType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeyrefTypeAdapter() {
		if (keyrefTypeItemProvider == null) {
			keyrefTypeItemProvider = new KeyrefTypeItemProvider(this);
		}

		return keyrefTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.ListType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListTypeItemProvider listTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.ListType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListTypeAdapter() {
		if (listTypeItemProvider == null) {
			listTypeItemProvider = new ListTypeItemProvider(this);
		}

		return listTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.LocalComplexType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalComplexTypeItemProvider localComplexTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.LocalComplexType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalComplexTypeAdapter() {
		if (localComplexTypeItemProvider == null) {
			localComplexTypeItemProvider = new LocalComplexTypeItemProvider(this);
		}

		return localComplexTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.LocalElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalElementItemProvider localElementItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.LocalElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalElementAdapter() {
		if (localElementItemProvider == null) {
			localElementItemProvider = new LocalElementItemProvider(this);
		}

		return localElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.LocalSimpleType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalSimpleTypeItemProvider localSimpleTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.LocalSimpleType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalSimpleTypeAdapter() {
		if (localSimpleTypeItemProvider == null) {
			localSimpleTypeItemProvider = new LocalSimpleTypeItemProvider(this);
		}

		return localSimpleTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.NamedAttributeGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedAttributeGroupItemProvider namedAttributeGroupItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.NamedAttributeGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedAttributeGroupAdapter() {
		if (namedAttributeGroupItemProvider == null) {
			namedAttributeGroupItemProvider = new NamedAttributeGroupItemProvider(this);
		}

		return namedAttributeGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.NamedGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedGroupItemProvider namedGroupItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.NamedGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedGroupAdapter() {
		if (namedGroupItemProvider == null) {
			namedGroupItemProvider = new NamedGroupItemProvider(this);
		}

		return namedGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.NarrowMaxMin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NarrowMaxMinItemProvider narrowMaxMinItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.NarrowMaxMin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNarrowMaxMinAdapter() {
		if (narrowMaxMinItemProvider == null) {
			narrowMaxMinItemProvider = new NarrowMaxMinItemProvider(this);
		}

		return narrowMaxMinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.NoFixedFacet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NoFixedFacetItemProvider noFixedFacetItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.NoFixedFacet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNoFixedFacetAdapter() {
		if (noFixedFacetItemProvider == null) {
			noFixedFacetItemProvider = new NoFixedFacetItemProvider(this);
		}

		return noFixedFacetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.NotationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NotationTypeItemProvider notationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.NotationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNotationTypeAdapter() {
		if (notationTypeItemProvider == null) {
			notationTypeItemProvider = new NotationTypeItemProvider(this);
		}

		return notationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.NumFacet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumFacetItemProvider numFacetItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.NumFacet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumFacetAdapter() {
		if (numFacetItemProvider == null) {
			numFacetItemProvider = new NumFacetItemProvider(this);
		}

		return numFacetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.OpenAttrs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpenAttrsItemProvider openAttrsItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.OpenAttrs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpenAttrsAdapter() {
		if (openAttrsItemProvider == null) {
			openAttrsItemProvider = new OpenAttrsItemProvider(this);
		}

		return openAttrsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.PatternType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PatternTypeItemProvider patternTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.PatternType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPatternTypeAdapter() {
		if (patternTypeItemProvider == null) {
			patternTypeItemProvider = new PatternTypeItemProvider(this);
		}

		return patternTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.RealGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RealGroupItemProvider realGroupItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.RealGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRealGroupAdapter() {
		if (realGroupItemProvider == null) {
			realGroupItemProvider = new RealGroupItemProvider(this);
		}

		return realGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.RedefineType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RedefineTypeItemProvider redefineTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.RedefineType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRedefineTypeAdapter() {
		if (redefineTypeItemProvider == null) {
			redefineTypeItemProvider = new RedefineTypeItemProvider(this);
		}

		return redefineTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.RestrictionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RestrictionTypeItemProvider restrictionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.RestrictionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRestrictionTypeAdapter() {
		if (restrictionTypeItemProvider == null) {
			restrictionTypeItemProvider = new RestrictionTypeItemProvider(this);
		}

		return restrictionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.RestrictionType1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RestrictionType1ItemProvider restrictionType1ItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.RestrictionType1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRestrictionType1Adapter() {
		if (restrictionType1ItemProvider == null) {
			restrictionType1ItemProvider = new RestrictionType1ItemProvider(this);
		}

		return restrictionType1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.SchemaType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SchemaTypeItemProvider schemaTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.SchemaType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSchemaTypeAdapter() {
		if (schemaTypeItemProvider == null) {
			schemaTypeItemProvider = new SchemaTypeItemProvider(this);
		}

		return schemaTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.SelectorType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelectorTypeItemProvider selectorTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.SelectorType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelectorTypeAdapter() {
		if (selectorTypeItemProvider == null) {
			selectorTypeItemProvider = new SelectorTypeItemProvider(this);
		}

		return selectorTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.SimpleContentType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleContentTypeItemProvider simpleContentTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.SimpleContentType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleContentTypeAdapter() {
		if (simpleContentTypeItemProvider == null) {
			simpleContentTypeItemProvider = new SimpleContentTypeItemProvider(this);
		}

		return simpleContentTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.SimpleExplicitGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleExplicitGroupItemProvider simpleExplicitGroupItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.SimpleExplicitGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleExplicitGroupAdapter() {
		if (simpleExplicitGroupItemProvider == null) {
			simpleExplicitGroupItemProvider = new SimpleExplicitGroupItemProvider(this);
		}

		return simpleExplicitGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.SimpleExtensionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleExtensionTypeItemProvider simpleExtensionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.SimpleExtensionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleExtensionTypeAdapter() {
		if (simpleExtensionTypeItemProvider == null) {
			simpleExtensionTypeItemProvider = new SimpleExtensionTypeItemProvider(this);
		}

		return simpleExtensionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.SimpleRestrictionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleRestrictionTypeItemProvider simpleRestrictionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.SimpleRestrictionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleRestrictionTypeAdapter() {
		if (simpleRestrictionTypeItemProvider == null) {
			simpleRestrictionTypeItemProvider = new SimpleRestrictionTypeItemProvider(this);
		}

		return simpleRestrictionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.TopLevelAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TopLevelAttributeItemProvider topLevelAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.TopLevelAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTopLevelAttributeAdapter() {
		if (topLevelAttributeItemProvider == null) {
			topLevelAttributeItemProvider = new TopLevelAttributeItemProvider(this);
		}

		return topLevelAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.TopLevelComplexType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TopLevelComplexTypeItemProvider topLevelComplexTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.TopLevelComplexType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTopLevelComplexTypeAdapter() {
		if (topLevelComplexTypeItemProvider == null) {
			topLevelComplexTypeItemProvider = new TopLevelComplexTypeItemProvider(this);
		}

		return topLevelComplexTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.TopLevelElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TopLevelElementItemProvider topLevelElementItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.TopLevelElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTopLevelElementAdapter() {
		if (topLevelElementItemProvider == null) {
			topLevelElementItemProvider = new TopLevelElementItemProvider(this);
		}

		return topLevelElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.TopLevelSimpleType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TopLevelSimpleTypeItemProvider topLevelSimpleTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.TopLevelSimpleType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTopLevelSimpleTypeAdapter() {
		if (topLevelSimpleTypeItemProvider == null) {
			topLevelSimpleTypeItemProvider = new TopLevelSimpleTypeItemProvider(this);
		}

		return topLevelSimpleTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.TotalDigitsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TotalDigitsTypeItemProvider totalDigitsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.TotalDigitsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTotalDigitsTypeAdapter() {
		if (totalDigitsTypeItemProvider == null) {
			totalDigitsTypeItemProvider = new TotalDigitsTypeItemProvider(this);
		}

		return totalDigitsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.UnionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnionTypeItemProvider unionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.UnionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnionTypeAdapter() {
		if (unionTypeItemProvider == null) {
			unionTypeItemProvider = new UnionTypeItemProvider(this);
		}

		return unionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.WhiteSpaceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhiteSpaceTypeItemProvider whiteSpaceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.WhiteSpaceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhiteSpaceTypeAdapter() {
		if (whiteSpaceTypeItemProvider == null) {
			whiteSpaceTypeItemProvider = new WhiteSpaceTypeItemProvider(this);
		}

		return whiteSpaceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.schema.Wildcard} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WildcardItemProvider wildcardItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.schema.Wildcard}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWildcardAdapter() {
		if (wildcardItemProvider == null) {
			wildcardItemProvider = new WildcardItemProvider(this);
		}

		return wildcardItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (allItemProvider != null) allItemProvider.dispose();
		if (annotatedItemProvider != null) annotatedItemProvider.dispose();
		if (annotationTypeItemProvider != null) annotationTypeItemProvider.dispose();
		if (anyTypeItemProvider != null) anyTypeItemProvider.dispose();
		if (appinfoTypeItemProvider != null) appinfoTypeItemProvider.dispose();
		if (attributeItemProvider != null) attributeItemProvider.dispose();
		if (attributeGroupRefItemProvider != null) attributeGroupRefItemProvider.dispose();
		if (complexContentTypeItemProvider != null) complexContentTypeItemProvider.dispose();
		if (complexRestrictionTypeItemProvider != null) complexRestrictionTypeItemProvider.dispose();
		if (documentationTypeItemProvider != null) documentationTypeItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (explicitGroupItemProvider != null) explicitGroupItemProvider.dispose();
		if (extensionTypeItemProvider != null) extensionTypeItemProvider.dispose();
		if (facetItemProvider != null) facetItemProvider.dispose();
		if (fieldTypeItemProvider != null) fieldTypeItemProvider.dispose();
		if (groupRefItemProvider != null) groupRefItemProvider.dispose();
		if (importTypeItemProvider != null) importTypeItemProvider.dispose();
		if (includeTypeItemProvider != null) includeTypeItemProvider.dispose();
		if (keybaseItemProvider != null) keybaseItemProvider.dispose();
		if (keyrefTypeItemProvider != null) keyrefTypeItemProvider.dispose();
		if (listTypeItemProvider != null) listTypeItemProvider.dispose();
		if (localComplexTypeItemProvider != null) localComplexTypeItemProvider.dispose();
		if (localElementItemProvider != null) localElementItemProvider.dispose();
		if (localSimpleTypeItemProvider != null) localSimpleTypeItemProvider.dispose();
		if (namedAttributeGroupItemProvider != null) namedAttributeGroupItemProvider.dispose();
		if (namedGroupItemProvider != null) namedGroupItemProvider.dispose();
		if (narrowMaxMinItemProvider != null) narrowMaxMinItemProvider.dispose();
		if (noFixedFacetItemProvider != null) noFixedFacetItemProvider.dispose();
		if (notationTypeItemProvider != null) notationTypeItemProvider.dispose();
		if (numFacetItemProvider != null) numFacetItemProvider.dispose();
		if (openAttrsItemProvider != null) openAttrsItemProvider.dispose();
		if (patternTypeItemProvider != null) patternTypeItemProvider.dispose();
		if (realGroupItemProvider != null) realGroupItemProvider.dispose();
		if (redefineTypeItemProvider != null) redefineTypeItemProvider.dispose();
		if (restrictionTypeItemProvider != null) restrictionTypeItemProvider.dispose();
		if (restrictionType1ItemProvider != null) restrictionType1ItemProvider.dispose();
		if (schemaTypeItemProvider != null) schemaTypeItemProvider.dispose();
		if (selectorTypeItemProvider != null) selectorTypeItemProvider.dispose();
		if (simpleContentTypeItemProvider != null) simpleContentTypeItemProvider.dispose();
		if (simpleExplicitGroupItemProvider != null) simpleExplicitGroupItemProvider.dispose();
		if (simpleExtensionTypeItemProvider != null) simpleExtensionTypeItemProvider.dispose();
		if (simpleRestrictionTypeItemProvider != null) simpleRestrictionTypeItemProvider.dispose();
		if (topLevelAttributeItemProvider != null) topLevelAttributeItemProvider.dispose();
		if (topLevelComplexTypeItemProvider != null) topLevelComplexTypeItemProvider.dispose();
		if (topLevelElementItemProvider != null) topLevelElementItemProvider.dispose();
		if (topLevelSimpleTypeItemProvider != null) topLevelSimpleTypeItemProvider.dispose();
		if (totalDigitsTypeItemProvider != null) totalDigitsTypeItemProvider.dispose();
		if (unionTypeItemProvider != null) unionTypeItemProvider.dispose();
		if (whiteSpaceTypeItemProvider != null) whiteSpaceTypeItemProvider.dispose();
		if (wildcardItemProvider != null) wildcardItemProvider.dispose();
	}

}
