// Created by: Athanasios Staikopoulos
// Copyright of Trinity College Dublin (TCD), Univeristy of Dublin, IE

import Actions2OperaUtil;

modeltype Opera 'strict' uses OM('http://ict-alive.sourceforge.net/operetta/OM/1.0');
modeltype Actions 'strict' uses actions('http://ict-alive.sourceforge.net/coordination/actions');
modeltype Map 'strict' uses OLCLMap('http://ict-alive.sourceforge.net/integration/OL2CLMap');
modeltype OWLS 'strict' uses process('http://ict-alive.sourceforge.net/owls/process');
modeltype Expr 'strict' uses expr('http://ict-alive.sourceforge.net/owls/expr');
modeltype Notation "strict" uses notation('http://www.eclipse.org/gmf/runtime/1.0.2/notation');
	
transformation Actions2Opera(in myActionsModel: Actions, out myOperaModel : Opera);

configuration property inActions : String ;
configuration property inOptions : String ;
configuration property inContainers : String ;
configuration property inOntologyURI : String;

property allParticipants : OrderedSet(OWLS::Participant) = OrderedSet{};

main() {	
	var actCol := myActionsModel.rootObjects()![actions::ActionsCollection];		
	var temp := actCol-> map toOpera();
}


mapping actions::ActionsCollection::toOpera():Opera::OperAModel{
init{
	
	var str_actions :=  getParameters(inActions, ";");

	var setActions: Sequence(actions::Action)= Sequence{};	
	str_actions ->forEach(a){
		setActions := setActions->append( self.actions->select(x|x.name.equalsIgnoreCase(a))->any(true) );
	};
	
	var setOptions :=  getParameters(inOptions, ";");
	var setContainers :=  getParameters(inContainers, ";");
	
	var opera :=  object Opera::OperAModel{
		Name := 'New OperA Model';
		om := object OM::OM{ 
		}	
	};		

	allParticipants := self.participants;
	var related_atoms := setActions[actions::AtomicAction].hasAtomicActionResult.hasAddEffect.name ;
		
	opera.om.ss := createEmptySS();
	opera.om.cs := createEmptyCS();
	opera.om.cs.ontology += createEmptyOntology(inOntologyURI);
	opera.om.is := createEmptyIS();
	opera.om.ns := createEmptyNS();
	
	process(opera, setActions, setOptions->asSequence(), setContainers->asSequence());
				
	addSSNotation();	
	addISNotation();
		
	result := opera;
}		
}

mapping process(inout opera:Opera::OperAModel, in setActions: Sequence(actions::Action), in setOptions : Sequence(String),in setContainers : Sequence(String)){
init{
		
	var i : Integer :=1;	
	while(i <= setActions->size()){			
	
		var containerAction : Actions::Action;			
			setActions->forEach(a){
				if( a.name.equalsIgnoreCase( setContainers->at(i) ) ) then
					containerAction := a
				endif ;
		};		
		process( setActions->at(i), setOptions->at(i) ,  containerAction , opera );
		i := i+1;
	};
	
	var allRelatedActions: List(actions::Action) ;
	setActions->forEach(a){
		allRelatedActions->add(a);
		a.find( allRelatedActions );
	};
		
	var allRelatedRoles := allRelatedActions.performedByRole->asSet();
	
	var allRelatedParticipants:= allRelatedRoles->iterate(r; w: Sequence(process::Participant)=Sequence{}| 
		w->append( allParticipants->select(p| p.name.equalsIgnoreCase(r.oclAsType(process::Participant).name) )->any(true) )
	);
	
	//Operate for roles		
	opera.om.ss.roles += allRelatedParticipants -> map createRole( allRelatedActions ); // + ontology concepts	
}	
}

mapping actions::Action::find(inout lst: List(actions::Action)){
init{
	
	self->forEach(a){
		if(a.oclIsTypeOf(actions::CompositeAction))then{
			var act:= a[actions::CompositeAction].getComposedOf();
			act->forEach(n){
				if n!=null then lst->add(n) endif;				
			};
			act.find(lst);
		}else{
			lst->add(a);
		}endif;
	};
}
}

mapping process(in action: actions::Action, in option: String, in containerAction:actions::Action, inout opera:Opera::OperAModel){
init{
	var related_participants := allParticipants->select(x| action.performedByRole->includes(x.name))->asSet();

	switch{
		
		case (option.equalsIgnoreCase("Objective")){			
			
			if( action.oclIsTypeOf(actions::AtomicAction) ) then{
				action[actions::AtomicAction].processAtoms(  opera );				
			}endif;
			
			opera.om.ss.objectives += action.processAsObjective( opera ); // + ontology concepts				
		};
		
		case (option.equalsIgnoreCase("Landmark")){
			var lm := action[actions::CompositeAction].compAction2Landmark( opera   );
					
			if (containerAction=null) then{			
				opera.om.is.scenes += object Opera::Scene{
					sceneID := "generated";
					interactionPattern := object LandmarkPattern{
						landmarks += lm;
					};
				};
			}else{				
				var lmp := 	containerAction.late resolveone( Opera::LandmarkPattern);
				lmp.landmarks += lm;
			}endif				
		};
		
		case (option.equalsIgnoreCase("LandmarkPattern")){
			var lmp := action[actions::CompositeAction].compAction2LandmarkPattern( opera   );
								
			if (containerAction=null) then{				
				opera.om.is.scenes += object Opera::Scene{
					sceneID := "generated";
					interactionPattern := lmp->any(true);
				};
			}else{				
				var scene := containerAction.late resolveone(Opera::Scene);
				scene.interactionPattern := lmp->any(true);
			}endif		
		};
		
		case (option.equalsIgnoreCase("Scene")){
			var cond : Opera::Scene;			
			opera.om.is.scenes->forEach(s){
				if( s.sceneID.equalsIgnoreCase( action.name ) ) then
					cond := s
				endif ;
			};
			if(cond=null  )then{				
				var scene := action[actions::CompositeAction].compAction2Scene( opera , SceneType::Normal );
				opera.om.is.scenes += scene;
			}endif;
		};
		
		case (option.equalsIgnoreCase("InteractionScene")){
			action[actions::CompositeAction].compAction2IS( opera );
		};
		
		//do not generate
		else {
		
		};
	};
	
}
}

property action_num =0;
//actionIS refers to the one mapped to IS
mapping actions::CompositeAction::compAction2IS( inout opera:Opera::OperAModel){
init{
	action_num := self.getComposedOf()->size();
}
	sequenceToScenes(self.composedOf![process::Sequence], opera);
} 

property counter =1;

mapping sequenceToScenes(in seq:process::_Sequence, inout opera:Opera::OperAModel ){
init{
	counter=1;
}
	processComponents(seq.components, opera, SceneType::Start);	
end{
	action_num =0;
	counter=1;
}
}

mapping processComponents(in components: OclAny, inout opera:Opera::OperAModel, in type:SceneType){
	//handle compoonents of a sequence etc
	if(components.oclIsTypeOf(process::ControlConstructList))then{
		var comp := components->oclAsType(process::ControlConstructList);
		var first:= comp.first;
		var rest:= comp.rest![process::ControlConstructList];		
			
		if rest.oclIsUndefined() or rest.oclIsInvalid() then{		
			if(counter < action_num ) then{
				a(first![process::ControlConstruct], opera, SceneType::Normal);	
			}else{
				a(first![process::ControlConstruct], opera, SceneType::End);										
			}endif;
		}else{
			a(first![process::ControlConstruct], opera, type);	
			processComponents(rest->any(true) , opera, SceneType::Normal);				
		}endif;	
						
	//handle components of any order
	}else{
		var comp := components->oclAsType(process::ControlConstructBag);
		var first:= comp.first;
		var rest:= comp.rest![process::ControlConstructBag];		

			if rest.oclIsUndefined() or rest.oclIsInvalid() then{			
			if(counter < action_num ) then{
				a(first![process::ControlConstruct], opera, SceneType::Normal);	
			}else{
				a(first![process::ControlConstruct], opera, SceneType::End);										
			}endif;
		}else{
			a(first![process::ControlConstruct], opera, type);	
			processComponents(rest->any(true) , opera, SceneType::Normal);				
		}endif;			
	
	}endif;	
}

mapping a(in c:process::ControlConstruct, inout opera:Opera::OperAModel, in type:Opera::SceneType){
				
		//f is perform
		if(c.oclIsTypeOf(process::Perform) )then{
			//make it scene
			opera.om.is.scenes += c![process::Perform].process![CompositeAction].compAction2Scene(opera, type);
			counter := counter +1;
		}endif;	
		
		//f is AnyOrder
		if(c.oclIsTypeOf(process::AnyOrder) )then{
			processComponents( c.oclAsType(process::AnyOrder).components, opera, SceneType::Normal);
		}endif;	
		
		//f is Sequence
		if(c.oclIsTypeOf(process::_Sequence) )then{
			processComponents( c.oclAsType(process::_Sequence).components, opera, SceneType::Normal);
		}endif;	
}

//CREATING a SCENE from COMPOSITE ACTION
mapping actions::CompositeAction::compAction2Scene(inout opera:Opera::OperAModel, in t:Opera::SceneType):Opera::Scene{
init{	
}
	sceneID := self.name;
	type := t;
	
	//olny for one i create a landmark pattern 
	interactionPattern := self.getComposedOf()![actions::CompositeAction].compAction2LandmarkPattern(  opera );
	
	self.performedByRole->forEach(e){
		players += object Opera::Player{
			role := late resolveoneIn( process::Participant::createRole, r: Opera::Role | r.Name.equalsIgnoreCase(e.oclAsType(Opera::Role).Name) );
		};
	};		
}

mapping actions::CompositeAction::compAction2LandmarkPattern(inout opera:Opera::OperAModel):Opera::LandmarkPattern{
	landmarks += self.getComposedOf()[actions::CompositeAction].compAction2Landmark( opera );	  
	addPartialOrders(self, result);
}

//there must be more than 1
mapping addPartialOrders(in act: actions::CompositeAction, inout lmp:Opera::LandmarkPattern)
when{act.getComposedOf()->size()>1}
{
	var lst := act.getComposedOf()->asSequence();
	
	var num := act.getComposedOf()->size();
	var index := 1;

	while(index<num){
		lmp.landmarkOrder +=  createPartialOrder( lst->at(index),   lst->at(index+1));
		index := index +1;
	};
}

mapping createPartialOrder(in f:actions::Action, in t:actions::Action):Opera::PartialOrder{
	_from := f.late resolveone(Opera::Landmark);
	 to := t.late resolveone(Opera::Landmark);
}

mapping actions::CompositeAction::compAction2Landmark(inout opera:Opera::OperAModel):Opera::Landmark{
init{
		
	var comp:= self.getComposedOf();	
	opera.om.ss.objectives += comp.processAsObjective(opera);
	self.processAtoms( opera );
}
	name := self.name;
	entails := comp.late resolve( Opera::Objective );
	stateDescription := self.hasResult![Result].hasEffect.late resolveone(Opera::Atom );
}

//operaModel to ActionCollection
mapping actions::Action::processAsObjective(inout opera:Opera::OperAModel): Opera::Objective {	
init{
	opera.om.cs.ontology->any(true).classes +=  self.name.toConcept(ConceptType::Class);		
}
	Name := self.name;		
	conceptName := self.name.late resolveone(Opera::Concept);
}

//inherits for atomic actions
mapping actions::AtomicAction::processAsObjective(inout opera:Opera::OperAModel): Opera::Objective inherits actions::Action::processAsObjective {
init{
	var exp := self.hasAtomicActionResult.hasAddEffect ;	
}		
	Name := "Atomic_"+self.name;		
	stateDescription := exp.late resolveone(Opera::Atom) ;	
}


//inherits for Composite Actions
mapping actions::CompositeAction::processAsObjective(inout opera:Opera::OperAModel): Opera::Objective inherits actions::Action::processAsObjective {	
init{
	var exp := self.hasResult.hasEffect;
	var ss := resolveoneIn(createEmptySS, Opera::SS);//resolveoneIn(addSS, Opera::SS);
	var  composedOf := self.getComposedOf();
		
	ss.objectives += if(composedOf->notEmpty()) then {
			composedOf.oclAsType(actions::Action)->forEach( act ){
				process(act , "Objective", null, opera) ;
			}					
		}endif;
}
	Name := "Composite_"+self.name;	 // overides previous
	subObjectives += composedOf.oclAsType(actions::Action).late resolve(Opera::Objective);	
	stateDescription := exp.late resolveone(Opera::Atom) ;	
}

mapping actions::Action::processAtoms(inout opera:Opera::OperAModel ){
init{
	var exp := if self.oclIsTypeOf(actions::AtomicAction) then 
			self[actions::AtomicAction].hasAtomicActionResult.hasAddEffect 
		else
			self[actions::CompositeAction].hasResult.hasEffect 
		endif;
		 	
	var args := exp.name->collect(x| getArguments(x))->asOrderedSet() ;	
}			
	//for Constants	
	 if( args->size()>0 )then{
	 	opera.om.cs.terms +=  args.toConstant( opera  );
	 }endif;
	 	 
	//for atoms
	if( exp->size()>0 )then{	  
		opera.om.cs.formulas += exp.toPartialState(opera); 	
	}endif;		
}

mapping process::Participant::createRole(in lst: List(actions::Action)):Opera::Role{
init{
	var temp := lst->select(x| x.performedByRole->includes(self.name));
	var ont:= resolveoneIn(createEmptyOntology, Opera::Ontology);
	ont.classes +=  self.name.toConcept(ConceptType::Class);	
}
	Name := self.name;
	objectives += temp.late resolve(Opera::Objective);
	conceptName := self.name.late resolveone(Opera::Concept); 	
}

//from string name
mapping Expression::toPartialState(inout opera:Opera::OperAModel): Opera::Atom{
init{
	var args:= getArguments( self.name );
	var pred:= getPredicate( self.name );
	opera.om.cs.ontology->any(true).classes +=  if(pred!=null) then pred.toConcept(ConceptType::Class) endif;
}	
	predicate := pred;		
	arguments += args.resolve ( Opera::Constant)  ; 	
	concept := pred.resolveone ( Opera::Concept)  ; 
}

mapping String::toConstant(inout opera:Opera::OperAModel):Opera::Constant{
init{
	opera.om.cs.ontology->any(true).classes += self.toConcept(ConceptType::Class);
}
	name := self;	
	concept := self.resolveone(Opera::Concept);
}  

mapping String::toConcept(in t: ConceptType):Opera::Concept{
	concept := self;
	URI := inOntologyURI + "#" + self;
	type := t;
}

mapping createEmptyOntology(in name:String):Opera::Ontology{
	ontologyID := name;
}

mapping createEmptySS():Opera::SS{
}
