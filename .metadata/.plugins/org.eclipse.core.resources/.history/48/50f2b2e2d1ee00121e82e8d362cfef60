// Created by: Athanasios Staikopoulos
// Copyright of Trinity College Dublin (TCD), Univeristy of Dublin, IE

modeltype Opera 'strict' uses OM('http://ict-alive.sourceforge.net/operetta/OM/1.0');
modeltype Actions 'strict' uses actions('http://ict-alive.sourceforge.net/coordination/actions');
modeltype Map 'strict' uses OLCLMap('http://ict-alive.sourceforge.net/integration/OL2CLMap');
modeltype OWLS 'strict' uses process('http://ict-alive.sourceforge.net/owls/process');
modeltype Expr 'strict' uses expr('http://ict-alive.sourceforge.net/owls/expr');

transformation Opera2Actions(in myOperaModel : Opera, out myActionsModel: Actions, out  myMap: Map);

property isMapGenerated : Boolean=true;

property counter : Integer = 0;

property m : OLCLMap::Mapping = object OLCLMap::Mapping{
};
		

main() {

	
	var myRootModel := myOperaModel.rootObjects()[OM::OperAModel];

	var allObjectives := myOperaModel.objectsOfType(OM::Objective);
	
	myRootModel->map toActionCollection(allObjectives);
		
}


//operaModel to ActionCollection
mapping OM::OperAModel::toActionCollection(in allObjectives:Set(OM::Objective)): actions::ActionsCollection {	

	//for AtomicActions
	result.actions +=  self.om.ss.objectives ->select(a| a.subObjectives->size()=0) -> map SimpleObjective2AtomicAction();
	//for CompositeActions
	result.actions +=  self.om.ss.objectives->select(a| a.subObjectives->size()>0 ) -> map CompositeObjective2CompositeAction();
  	//for LMs
    result.actions += self.om.is.scenes->collect(e| e.interactionPattern->collect(p| p.landmarks ->  map Landmark2CompositeAction(result)));
    //for LMPs
 	result.actions += self.om.is.scenes->collect(e| e.interactionPattern->map LandmarkPattern2CompositeAction());
	//scenes	
	result.actions += self.om.is.scenes-> map Scene2CompositeAction() ;
	//is
	result.actions += self.om.is-> map IS2CompositeAction() ;
	//participants
  //  log ("all participants are: ", self.om.is.scenes->collect(p| p.players)->size() ); 
	participants += self.om.is.scenes->collect(p| p.players->map Player2Participant());
	
}

//create Participants from Players
mapping OM::Player::Player2Participant():process::Participant{
	name := self.role.Name;
end{	
	if isMapGenerated then 
		m.entry += self->map logPlayer2Participant(result)
	endif
}	
}


//abstract 
mapping OM::Objective::Objective2Action():actions::Action{
init{
	result.name := self.Name;
	result.performedByRole += self.usedByRole->collect(e.oclAsType(Opera::Role)); 
}
end{	
	if isMapGenerated then 
	m.entry += self->map logObjective2Action(result)
	endif
}	
}

//mapping Objectives to Actions (Both Atomic and Composite)
mapping OM::Objective::SimpleObjective2AtomicAction():actions::AtomicAction
inherits OM::Objective::Objective2Action
when { self.subObjectives->size()=0}	
{		
	if self.stateDescription.oclIsUndefined()=false then{
		hasAtomicActionResult := object actions::AtomicActionResult{
			if (self.stateDescription.oclIsTypeOf(OM::Negation)) then
				hasDeleteEffect += self.stateDescription->map toPartialState()
			else
				hasAddEffect += self.stateDescription->map toPartialState()
			endif
		}
	}endif

}


//Interaction Scene to CompositeAction
mapping OM::IS::IS2CompositeAction():actions::CompositeAction{
	var sc := self.scenes;
	var arcs := self.arcs; 
	
	var connected := arcs[OM::SceneToTransitionArc]->collect(x| x._from);
	var connected2 := arcs[OM::TransitionToSceneArc]->collect(x| x.to);
	var potentialEnd := sc->symmetricDifference(connected->asSet());
	var potentialStart := sc->symmetricDifference(connected2->asSet());
	
	var potentialMiddle := sc->excluding(potentialStart->any(true));//->excludes(potentialEnd->any(true));
	var potentialMiddle2 :=potentialMiddle->excluding(potentialEnd->any(true));
			
	name := '[IS]_' ;	
	composedOf := map createSequence(potentialStart->asOrderedSet(), potentialMiddle2->asOrderedSet(), potentialEnd->asOrderedSet());
end{
	if isMapGenerated then 	
	m.entry += self->map logIS2Action(result)
	endif
}		
}

mapping createSequence(in s:OrderedSet(OM::Scene), in m:OrderedSet(OM::Scene), in e:OrderedSet(OM::Scene)):process::_Sequence{	
	components:= map createISList(s, m, e);	
}

mapping createISList(inout s:OrderedSet(OM::Scene),  inout m:OrderedSet(OM::Scene), inout e:OrderedSet(OM::Scene)):process::ControlConstructList{
init{
	
	result := object process::ControlConstructList{		
	} ;
	
	if (s->size()>1) then{
	 	result.first := addAnyOrderOf(s);// map createAnyOrderOf( s );
	}else{
		result.first  := map createScenePerform(s->any(true));

	}endif;	
	
}

	result.rest := object process::ControlConstructList{
		if (m->size()>1) then{
			first := addAnyOrderOf(m->asOrderedSet());// map createAnyOrderOf( m->asOrderedSet() );
			rest := object process::ControlConstructList{
				if (e->size()>1) then{
					first := addAnyOrderOf(e->asOrderedSet());//map createAnyOrderOf( e->asOrderedSet() );
				}else{
					first := map createScenePerform(e![OM::Scene]);
					
				}endif;
			}
		--no middle
		}else{	
				if (e->size()>1) then{
					first := addAnyOrderOf(e->asOrderedSet());//map createAnyOrderOf( e->asOrderedSet() );
				}else{
					first := map createScenePerform(e![OM::Scene]);
					
				}endif;
		}endif
	};

}


//mapping Objectives to Actions (Both Atomic and Composite)
mapping OM::Objective::CompositeObjective2CompositeAction():actions::CompositeAction
inherits OM::Objective::Objective2Action
when { self.subObjectives->size()>0}
{
	composedOf := addAnyOrderOf(self.subObjectives);		
}	

//landmarks
//objectives
query addAnyOrderOf(inout elem:OrderedSet(OclAny)):process::AnyOrder{
	
	var res:= object process::AnyOrder{
		components := addBagOf(elem);
	};

	return res	;
}	


		
query addBagOf(inout elem:OrderedSet(OclAny)): process::ControlConstructBag
{
		var res :=  object process::ControlConstructBag{};
		
		var f := elem->first();	
		res.first := switch {
			case (f.oclIsTypeOf(OM::Objective))  
				addObjectivePerform(f.oclAsType(OM::Objective));
			case (f.oclIsTypeOf(OM::Landmark))  
				addLandmarkPerform(f.oclAsType(OM::Landmark));
			case (f.oclIsTypeOf(OM::LandmarkPattern))  
				map createLandmarkPatternPerform(f.oclAsType(OM::LandmarkPattern));
			case (f.oclIsTypeOf(OM::Scene))  
				map createScenePerform(f.oclAsType(OM::Scene));
			else
			 	null;
			};
	
		var restElem := elem->excluding(f)->asOrderedSet();
			
		if ( restElem->size()>0) then		{		
			res.rest := addBagOf(restElem);
		}			
		else{			
			res.rest := null;			
		}	
		endif	;
				
		return res;	
}	

mapping OM::Landmark::Landmark2CompositeAction(inout col: actions::ActionsCollection):actions::CompositeAction{
	name := '[LM]_'+ self.name  ;	
	performedByRole += self.entails->collect(e| e.usedByRole.Name);
	
	if(self.entails->size()>0) then {
		composedOf := addAnyOrderOf(self.entails);		
	}endif	
end{	
	if isMapGenerated then 
		m.entry += self->map logLandmark2Action(result)
	endif
}	
}

query addLandmarkPerform(in elem: OM::Landmark):process::Perform{
	var res := object process::Perform{
		name := elem.name;
		process := elem.resolveone(actions::Action);
	};
	
	return res;
}

query addObjectivePerform(in elem: OM::Objective):process::Perform{
	var res := object process::Perform{
		name := elem.Name;
		process := getGeneratedAction(elem)
	};
	
	return res;
}

query getGeneratedAction(in elem: OM::Objective):actions::Action{
	return elem.resolveone(actions::Action);
}


//Scenes to CompositeActions
mapping OM::Scene::Scene2CompositeAction():actions::CompositeAction{
	
	name := '[Scene]_'+ self.sceneID ;	
	performedByRole += self.players->collect(p|p.role.Name);
	composedOf := addAnyOrderOf(self.interactionPattern->asOrderedSet());
end{	
	if isMapGenerated then 
		m.entry += self->map logScene2Action(result)
	endif
}		
}

mapping OM::LandmarkPattern::LandmarkPattern2CompositeAction():actions::CompositeAction{
init{
counter := counter +1;
}	

	var po:=self.landmarkOrder;
	var lm:=self.landmarks;
	
	name := '[LMP]_' + (counter).toString() ;	
	performedByRole += self.landmarks.entails->collect(e| e.usedByRole.Name);
	
	composedOf := map createSequence(lm, po);
	
end{	
	if isMapGenerated then 
	m.entry += self->map logLandmarkPattern2Action(result)
	endif
}	
}

mapping createSequence(in lm:OrderedSet(OM::Landmark), in po:OrderedSet(OM::PartialOrder)):process::_Sequence{	
	components:= map createList(lm, po);	
}

mapping createList(in lm:OrderedSet(OM::Landmark), in po:OrderedSet(OM::PartialOrder)): process::ControlConstructList{
					
	--if the are more than one lm
	if (lm->size()>1) then{
	
		var s:= findFirst(lm, po)->asOrderedSet();
		
		--if i have many starts
		if (s->size()>1) then{
			-- add s in a bug of performs
			first := addAnyOrderOf(s);
			
			--folowing part same as below
			var restLM := lm->symmetricDifference( s )->asOrderedSet();
				
			var restPO := po->select(el | el._from->excludesAll(s->select(true)) );
			
			
			if ( restLM->notEmpty()) then		{			
				rest := map createList(restLM, restPO);
			}			
			else{			
				rest := null;			
			}	
			endif	
		
		--if i have 1 or zero starts
		}else{
							
			first := addLandmarkPerform(lm![OM::Landmark]);
			
			var restLM := lm->symmetricDifference( s )->asOrderedSet();
			var restPO := po->symmetricDifference(po->select(a| a._from = s![OM::Landmark]) )->asOrderedSet();
				
			if ( restLM->notEmpty()) then		{			
				rest := map createList(restLM, restPO);
			}			
			else{			
				rest := null;			
			}	
			endif	
			
		
		}endif
	
	--if there are one or zero lm
	}else
		first := addLandmarkPerform(lm![OM::Landmark])
	endif

}

query findFirst(in lm:OrderedSet(OM::Landmark), in po:OrderedSet(OM::PartialOrder)):Set(OM::Landmark){
	
	var to_lo := po->collect(x| x.to);
	var potentialStart := lm->symmetricDifference(to_lo->asSet());

	return potentialStart;
}

				
mapping OM::PartialStateDescription::toPartialState(): expr::Expression {
	name := self.ID; // to be changed
}


query _addLandmarkPatternPerform(lmp:OM::LandmarkPattern):process::Perform{
	var res := object	process::Perform{
		name='LMP';
		process:=lmp.late resolveone(process::Process);
	};
	return res;
}
mapping createLandmarkPatternPerform(lmp:OM::LandmarkPattern):process::Perform{
	process:=lmp.late resolveone(process::Process); 	
end{
	result.name := 'LMP';
}	
}
mapping createLandmarkPerform(lm:OM::Landmark):process::Perform{
	name=lm.name;
	process:=lm.late resolveone(process::Process); 	

}
mapping createObjectivePerform(inout obj:OM::Objective):process::Perform{
	
	name:=obj.Name;
	if (obj.subObjectives->isEmpty())then{
		process:=obj.resolveone( actions::AtomicAction);//resolve(e:actions::AtomicAction| e.name=obj.Name)->first();//(OM::Objective::SimpleObjective2AtomicAction,actions::AtomicAction)->first();
	}else{
		process:=obj.resolveone(actions::CompositeAction);
	}endif

}	


mapping createScenePerform(in sc:OM::Scene):process::Perform{
init{ 
	
	result := object process::Perform{
			process:=sc.late resolveone(process::Process);
	};
} 
end{
 result.name := sc.sceneID;
}	
}

--------------------------------

mapping OM::Objective::logObjective2Action(inout a:Actions::Action):OLCLMap::Objective2Action@myMap{ 
	objective := self;
	action :=	a;
}

mapping OM::Landmark::logLandmark2Action(inout a:Actions::Action):OLCLMap::Landmark2Action@myMap{ 
	landmark := self;
	action :=	a;
}

mapping OM::LandmarkPattern::logLandmarkPattern2Action(inout a:Actions::Action):OLCLMap::LandmarkPattern2Action@myMap{ 
	pattern := self;
	action :=	a;
}

mapping OM::Scene::logScene2Action(inout a:Actions::Action):OLCLMap::Scene2Action@myMap{ 
	scene := self;
	action :=	a;
}

mapping OM::IS::logIS2Action(inout a:Actions::Action):OLCLMap::IS2Action@myMap{ 
	interactionScene := self;
	action :=	a;
}

mapping OM::Player::logPlayer2Participant(inout p: process::Participant):OLCLMap::Player2Participant@myMap{ 
	player := self;
	participant :=	p;
}