/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package net.sf.ictalive.coordination.wfannotation.mapping.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.sf.ictalive.coordination.wfannotation.mapping.util.MappingAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MappingItemProviderAdapterFactory extends MappingAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MappingItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.coordination.wfannotation.mapping.MappingContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MappingContainerItemProvider mappingContainerItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.coordination.wfannotation.mapping.MappingContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMappingContainerAdapter() {
		if (mappingContainerItemProvider == null) {
			mappingContainerItemProvider = new MappingContainerItemProvider(this);
		}

		return mappingContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.coordination.wfannotation.mapping.PartnerActivityToAtomicActionMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PartnerActivityToAtomicActionMappingItemProvider partnerActivityToAtomicActionMappingItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.coordination.wfannotation.mapping.PartnerActivityToAtomicActionMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPartnerActivityToAtomicActionMappingAdapter() {
		if (partnerActivityToAtomicActionMappingItemProvider == null) {
			partnerActivityToAtomicActionMappingItemProvider = new PartnerActivityToAtomicActionMappingItemProvider(this);
		}

		return partnerActivityToAtomicActionMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.coordination.wfannotation.mapping.ProcessToCompositeActionMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessToCompositeActionMappingItemProvider processToCompositeActionMappingItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.coordination.wfannotation.mapping.ProcessToCompositeActionMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessToCompositeActionMappingAdapter() {
		if (processToCompositeActionMappingItemProvider == null) {
			processToCompositeActionMappingItemProvider = new ProcessToCompositeActionMappingItemProvider(this);
		}

		return processToCompositeActionMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.coordination.wfannotation.mapping.SequenceToSequenceMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequenceToSequenceMappingItemProvider sequenceToSequenceMappingItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.coordination.wfannotation.mapping.SequenceToSequenceMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequenceToSequenceMappingAdapter() {
		if (sequenceToSequenceMappingItemProvider == null) {
			sequenceToSequenceMappingItemProvider = new SequenceToSequenceMappingItemProvider(this);
		}

		return sequenceToSequenceMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.coordination.wfannotation.mapping.IfToIfThenElseMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IfToIfThenElseMappingItemProvider ifToIfThenElseMappingItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.coordination.wfannotation.mapping.IfToIfThenElseMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIfToIfThenElseMappingAdapter() {
		if (ifToIfThenElseMappingItemProvider == null) {
			ifToIfThenElseMappingItemProvider = new IfToIfThenElseMappingItemProvider(this);
		}

		return ifToIfThenElseMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.coordination.wfannotation.mapping.WhileToRepeatWhileMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhileToRepeatWhileMappingItemProvider whileToRepeatWhileMappingItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.coordination.wfannotation.mapping.WhileToRepeatWhileMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhileToRepeatWhileMappingAdapter() {
		if (whileToRepeatWhileMappingItemProvider == null) {
			whileToRepeatWhileMappingItemProvider = new WhileToRepeatWhileMappingItemProvider(this);
		}

		return whileToRepeatWhileMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.coordination.wfannotation.mapping.RepeatUntilToRepeatUntilMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepeatUntilToRepeatUntilMappingItemProvider repeatUntilToRepeatUntilMappingItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.coordination.wfannotation.mapping.RepeatUntilToRepeatUntilMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepeatUntilToRepeatUntilMappingAdapter() {
		if (repeatUntilToRepeatUntilMappingItemProvider == null) {
			repeatUntilToRepeatUntilMappingItemProvider = new RepeatUntilToRepeatUntilMappingItemProvider(this);
		}

		return repeatUntilToRepeatUntilMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.coordination.wfannotation.mapping.FlowToSplitJoinMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowToSplitJoinMappingItemProvider flowToSplitJoinMappingItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.coordination.wfannotation.mapping.FlowToSplitJoinMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowToSplitJoinMappingAdapter() {
		if (flowToSplitJoinMappingItemProvider == null) {
			flowToSplitJoinMappingItemProvider = new FlowToSplitJoinMappingItemProvider(this);
		}

		return flowToSplitJoinMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.coordination.wfannotation.mapping.ForToRepeatWhileMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForToRepeatWhileMappingItemProvider forToRepeatWhileMappingItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.coordination.wfannotation.mapping.ForToRepeatWhileMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForToRepeatWhileMappingAdapter() {
		if (forToRepeatWhileMappingItemProvider == null) {
			forToRepeatWhileMappingItemProvider = new ForToRepeatWhileMappingItemProvider(this);
		}

		return forToRepeatWhileMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.coordination.wfannotation.mapping.ScopeToCompositeActionMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScopeToCompositeActionMappingItemProvider scopeToCompositeActionMappingItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.coordination.wfannotation.mapping.ScopeToCompositeActionMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScopeToCompositeActionMappingAdapter() {
		if (scopeToCompositeActionMappingItemProvider == null) {
			scopeToCompositeActionMappingItemProvider = new ScopeToCompositeActionMappingItemProvider(this);
		}

		return scopeToCompositeActionMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.coordination.wfannotation.mapping.ElseIfToIfThenElseMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElseIfToIfThenElseMappingItemProvider elseIfToIfThenElseMappingItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.coordination.wfannotation.mapping.ElseIfToIfThenElseMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElseIfToIfThenElseMappingAdapter() {
		if (elseIfToIfThenElseMappingItemProvider == null) {
			elseIfToIfThenElseMappingItemProvider = new ElseIfToIfThenElseMappingItemProvider(this);
		}

		return elseIfToIfThenElseMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.coordination.wfannotation.mapping.ElseToElseMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElseToElseMappingItemProvider elseToElseMappingItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.coordination.wfannotation.mapping.ElseToElseMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElseToElseMappingAdapter() {
		if (elseToElseMappingItemProvider == null) {
			elseToElseMappingItemProvider = new ElseToElseMappingItemProvider(this);
		}

		return elseToElseMappingItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (mappingContainerItemProvider != null) mappingContainerItemProvider.dispose();
		if (partnerActivityToAtomicActionMappingItemProvider != null) partnerActivityToAtomicActionMappingItemProvider.dispose();
		if (processToCompositeActionMappingItemProvider != null) processToCompositeActionMappingItemProvider.dispose();
		if (sequenceToSequenceMappingItemProvider != null) sequenceToSequenceMappingItemProvider.dispose();
		if (ifToIfThenElseMappingItemProvider != null) ifToIfThenElseMappingItemProvider.dispose();
		if (whileToRepeatWhileMappingItemProvider != null) whileToRepeatWhileMappingItemProvider.dispose();
		if (repeatUntilToRepeatUntilMappingItemProvider != null) repeatUntilToRepeatUntilMappingItemProvider.dispose();
		if (flowToSplitJoinMappingItemProvider != null) flowToSplitJoinMappingItemProvider.dispose();
		if (forToRepeatWhileMappingItemProvider != null) forToRepeatWhileMappingItemProvider.dispose();
		if (scopeToCompositeActionMappingItemProvider != null) scopeToCompositeActionMappingItemProvider.dispose();
		if (elseIfToIfThenElseMappingItemProvider != null) elseIfToIfThenElseMappingItemProvider.dispose();
		if (elseToElseMappingItemProvider != null) elseToElseMappingItemProvider.dispose();
	}

}
